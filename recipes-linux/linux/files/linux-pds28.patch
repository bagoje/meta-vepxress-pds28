diff --git a/arch/arm/boot/dts/Makefile b/arch/arm/boot/dts/Makefile
index 4572db3fa5ae..02fd3a8275b7 100644
--- a/arch/arm/boot/dts/Makefile
+++ b/arch/arm/boot/dts/Makefile
@@ -1265,6 +1265,7 @@ dtb-$(CONFIG_ARCH_VERSATILE) += \
 dtb-$(CONFIG_ARCH_VEXPRESS) += \
 	vexpress-v2p-ca5s.dtb \
 	vexpress-v2p-ca9.dtb \
+	vexpress-pds28.dtb \
 	vexpress-v2p-ca15-tc1.dtb \
 	vexpress-v2p-ca15_a7.dtb
 dtb-$(CONFIG_ARCH_VIRT) += \
diff --git a/arch/arm/boot/dts/vexpress-pds28.dts b/arch/arm/boot/dts/vexpress-pds28.dts
new file mode 100644
index 000000000000..849890962238
--- /dev/null
+++ b/arch/arm/boot/dts/vexpress-pds28.dts
@@ -0,0 +1,368 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * ARM Ltd. Versatile Express
+ *
+ * CoreTile Express A9x4
+ * Cortex-A9 MPCore (V2P-CA9)
+ *
+ * HBI-0191B
+ */
+
+/dts-v1/;
+#include "vexpress-pds28.dtsi"
+
+/ {
+	model = "V2P-CA9";
+	arm,hbi = <0x191>;
+	arm,vexpress,site = <0xf>;
+	compatible = "arm,vexpress,v2p-ca9", "arm,vexpress";
+	interrupt-parent = <&gic>;
+	#address-cells = <1>;
+	#size-cells = <1>;
+
+	chosen { };
+
+	aliases {
+		serial0 = &v2m_serial0;
+		serial1 = &v2m_serial1;
+		serial2 = &v2m_serial2;
+		serial3 = &v2m_serial3;
+		i2c0 = &v2m_i2c_dvi;
+		i2c1 = &v2m_i2c_pcie;
+	};
+
+	cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		A9_0: cpu@0 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <0>;
+			next-level-cache = <&L2>;
+		};
+
+		A9_1: cpu@1 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <1>;
+			next-level-cache = <&L2>;
+		};
+
+		A9_2: cpu@2 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <2>;
+			next-level-cache = <&L2>;
+		};
+
+		A9_3: cpu@3 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <3>;
+			next-level-cache = <&L2>;
+		};
+	};
+
+	memory@80000000 {
+		device_type = "memory";
+		reg = <0x80000000 0x40000000>;
+	};
+
+	reserved-memory {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges;
+
+		/* Chipselect 3 is physically at 0x4c000000 */
+		vram: vram@4c000000 {
+			/* 8 MB of designated video RAM */
+			compatible = "shared-dma-pool";
+			reg = <0x4c000000 0x00800000>;
+			no-map;
+		};
+	};
+
+	clcd@10020000 {
+		compatible = "arm,pl111", "arm,primecell";
+		reg = <0x10020000 0x1000>;
+		interrupt-names = "combined";
+		interrupts = <0 44 4>;
+		clocks = <&oscclk1>, <&oscclk2>;
+		clock-names = "clcdclk", "apb_pclk";
+		/* 1024x768 16bpp @65MHz */
+		max-memory-bandwidth = <95000000>;
+
+		port {
+			clcd_pads_ct: endpoint {
+				remote-endpoint = <&dvi_bridge_in_ct>;
+				arm,pl11x,tft-r0g0b0-pads = <0 8 16>;
+			};
+		};
+	};
+
+	memory-controller@100e0000 {
+		compatible = "arm,pl341", "arm,primecell";
+		reg = <0x100e0000 0x1000>;
+		clocks = <&oscclk2>;
+		clock-names = "apb_pclk";
+	};
+
+	memory-controller@100e1000 {
+		compatible = "arm,pl354", "arm,primecell";
+		reg = <0x100e1000 0x1000>;
+		interrupts = <0 45 4>,
+			     <0 46 4>;
+		clocks = <&oscclk2>;
+		clock-names = "apb_pclk";
+	};
+
+	timer@100e4000 {
+		compatible = "arm,sp804", "arm,primecell";
+		reg = <0x100e4000 0x1000>;
+		interrupts = <0 48 4>,
+			     <0 49 4>;
+		clocks = <&oscclk2>, <&oscclk2>;
+		clock-names = "timclk", "apb_pclk";
+		status = "disabled";
+	};
+
+	watchdog@100e5000 {
+		compatible = "arm,sp805", "arm,primecell";
+		reg = <0x100e5000 0x1000>;
+		interrupts = <0 51 4>;
+		clocks = <&oscclk2>, <&oscclk2>;
+		clock-names = "wdogclk", "apb_pclk";
+	};
+
+	scu@1e000000 {
+		compatible = "arm,cortex-a9-scu";
+		reg = <0x1e000000 0x58>;
+	};
+
+	timer@1e000600 {
+		compatible = "arm,cortex-a9-twd-timer";
+		reg = <0x1e000600 0x20>;
+		interrupts = <1 13 0xf04>;
+	};
+
+	watchdog@1e000620 {
+		compatible = "arm,cortex-a9-twd-wdt";
+		reg = <0x1e000620 0x20>;
+		interrupts = <1 14 0xf04>;
+	};
+
+	gic: interrupt-controller@1e001000 {
+		compatible = "arm,cortex-a9-gic";
+		#interrupt-cells = <3>;
+		#address-cells = <0>;
+		interrupt-controller;
+		reg = <0x1e001000 0x1000>,
+		      <0x1e000100 0x100>;
+	};
+
+	L2: cache-controller@1e00a000 {
+		compatible = "arm,pl310-cache";
+		reg = <0x1e00a000 0x1000>;
+		interrupts = <0 43 4>;
+		cache-unified;
+		cache-level = <2>;
+		arm,data-latency = <1 1 1>;
+		arm,tag-latency = <1 1 1>;
+	};
+
+	pmu {
+		compatible = "arm,cortex-a9-pmu";
+		interrupts = <0 60 4>,
+			     <0 61 4>,
+			     <0 62 4>,
+			     <0 63 4>;
+		interrupt-affinity = <&A9_0>, <&A9_1>, <&A9_2>, <&A9_3>;
+
+	};
+
+	dcc {
+		compatible = "arm,vexpress,config-bus";
+		arm,vexpress,config-bridge = <&v2m_sysreg>;
+
+		oscclk0: extsaxiclk {
+			/* ACLK clock to the AXI master port on the test chip */
+			compatible = "arm,vexpress-osc";
+			arm,vexpress-sysreg,func = <1 0>;
+			freq-range = <30000000 50000000>;
+			#clock-cells = <0>;
+			clock-output-names = "extsaxiclk";
+		};
+
+		oscclk1: clcdclk {
+			/* Reference clock for the CLCD */
+			compatible = "arm,vexpress-osc";
+			arm,vexpress-sysreg,func = <1 1>;
+			freq-range = <10000000 80000000>;
+			#clock-cells = <0>;
+			clock-output-names = "clcdclk";
+		};
+
+		smbclk: oscclk2: tcrefclk {
+			/* Reference clock for the test chip internal PLLs */
+			compatible = "arm,vexpress-osc";
+			arm,vexpress-sysreg,func = <1 2>;
+			freq-range = <33000000 100000000>;
+			#clock-cells = <0>;
+			clock-output-names = "tcrefclk";
+		};
+
+		volt-vd10 {
+			/* Test Chip internal logic voltage */
+			compatible = "arm,vexpress-volt";
+			arm,vexpress-sysreg,func = <2 0>;
+			regulator-name = "VD10";
+			regulator-always-on;
+			label = "VD10";
+		};
+
+		volt-vd10-s2 {
+			/* PL310, L2 cache, RAM cell supply (not PL310 logic) */
+			compatible = "arm,vexpress-volt";
+			arm,vexpress-sysreg,func = <2 1>;
+			regulator-name = "VD10_S2";
+			regulator-always-on;
+			label = "VD10_S2";
+		};
+
+		volt-vd10-s3 {
+			/* Cortex-A9 system supply, Cores, MPEs, SCU and PL310 logic */
+			compatible = "arm,vexpress-volt";
+			arm,vexpress-sysreg,func = <2 2>;
+			regulator-name = "VD10_S3";
+			regulator-always-on;
+			label = "VD10_S3";
+		};
+
+		volt-vcc1v8 {
+			/* DDR2 SDRAM and Test Chip DDR2 I/O supply */
+			compatible = "arm,vexpress-volt";
+			arm,vexpress-sysreg,func = <2 3>;
+			regulator-name = "VCC1V8";
+			regulator-always-on;
+			label = "VCC1V8";
+		};
+
+		volt-ddr2vtt {
+			/* DDR2 SDRAM VTT termination voltage */
+			compatible = "arm,vexpress-volt";
+			arm,vexpress-sysreg,func = <2 4>;
+			regulator-name = "DDR2VTT";
+			regulator-always-on;
+			label = "DDR2VTT";
+		};
+
+		volt-vcc3v3 {
+			/* Local board supply for miscellaneous logic external to the Test Chip */
+			arm,vexpress-sysreg,func = <2 5>;
+			compatible = "arm,vexpress-volt";
+			regulator-name = "VCC3V3";
+			regulator-always-on;
+			label = "VCC3V3";
+		};
+
+		amp-vd10-s2 {
+			/* PL310, L2 cache, RAM cell supply (not PL310 logic) */
+			compatible = "arm,vexpress-amp";
+			arm,vexpress-sysreg,func = <3 0>;
+			label = "VD10_S2";
+		};
+
+		amp-vd10-s3 {
+			/* Cortex-A9 system supply, Cores, MPEs, SCU and PL310 logic */
+			compatible = "arm,vexpress-amp";
+			arm,vexpress-sysreg,func = <3 1>;
+			label = "VD10_S3";
+		};
+
+		power-vd10-s2 {
+			/* PL310, L2 cache, RAM cell supply (not PL310 logic) */
+			compatible = "arm,vexpress-power";
+			arm,vexpress-sysreg,func = <12 0>;
+			label = "PVD10_S2";
+		};
+
+		power-vd10-s3 {
+			/* Cortex-A9 system supply, Cores, MPEs, SCU and PL310 logic */
+			compatible = "arm,vexpress-power";
+			arm,vexpress-sysreg,func = <12 1>;
+			label = "PVD10_S3";
+		};
+	};
+
+	smb: smb@4000000 {
+		compatible = "simple-bus";
+
+		#address-cells = <2>;
+		#size-cells = <1>;
+		ranges = <0 0 0x40000000 0x04000000>,
+			 <1 0 0x44000000 0x04000000>,
+			 <2 0 0x48000000 0x04000000>,
+			 <3 0 0x4c000000 0x04000000>,
+			 <7 0 0x10000000 0x00020000>;
+
+		#interrupt-cells = <1>;
+		interrupt-map-mask = <0 0 63>;
+		interrupt-map = <0 0  0 &gic 0  0 4>,
+				<0 0  1 &gic 0  1 4>,
+				<0 0  2 &gic 0  2 4>,
+				<0 0  3 &gic 0  3 4>,
+				<0 0  4 &gic 0  4 4>,
+				<0 0  5 &gic 0  5 4>,
+				<0 0  6 &gic 0  6 4>,
+				<0 0  7 &gic 0  7 4>,
+				<0 0  8 &gic 0  8 4>,
+				<0 0  9 &gic 0  9 4>,
+				<0 0 10 &gic 0 10 4>,
+				<0 0 11 &gic 0 11 4>,
+				<0 0 12 &gic 0 12 4>,
+				<0 0 13 &gic 0 13 4>,
+				<0 0 14 &gic 0 14 4>,
+				<0 0 15 &gic 0 15 4>,
+				<0 0 16 &gic 0 16 4>,
+				<0 0 17 &gic 0 17 4>,
+				<0 0 18 &gic 0 18 4>,
+				<0 0 19 &gic 0 19 4>,
+				<0 0 20 &gic 0 20 4>,
+				<0 0 21 &gic 0 21 4>,
+				<0 0 22 &gic 0 22 4>,
+				<0 0 23 &gic 0 23 4>,
+				<0 0 24 &gic 0 24 4>,
+				<0 0 25 &gic 0 25 4>,
+				<0 0 26 &gic 0 26 4>,
+				<0 0 27 &gic 0 27 4>,
+				<0 0 28 &gic 0 28 4>,
+				<0 0 29 &gic 0 29 4>,
+				<0 0 30 &gic 0 30 4>,
+				<0 0 31 &gic 0 31 4>,
+				<0 0 32 &gic 0 32 4>,
+				<0 0 33 &gic 0 33 4>,
+				<0 0 34 &gic 0 34 4>,
+				<0 0 35 &gic 0 35 4>,
+				<0 0 36 &gic 0 36 4>,
+				<0 0 37 &gic 0 37 4>,
+				<0 0 38 &gic 0 38 4>,
+				<0 0 39 &gic 0 39 4>,
+				<0 0 40 &gic 0 40 4>,
+				<0 0 41 &gic 0 41 4>,
+				<0 0 42 &gic 0 42 4>;
+	};
+
+	site2: hsb@e0000000 {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges = <0 0xe0000000 0x20000000>;
+		#interrupt-cells = <1>;
+		interrupt-map-mask = <0 3>;
+		interrupt-map = <0 0 &gic 0 36 4>,
+				<0 1 &gic 0 37 4>,
+				<0 2 &gic 0 38 4>,
+				<0 3 &gic 0 39 4>;
+	};
+};
diff --git a/arch/arm/boot/dts/vexpress-pds28.dtsi b/arch/arm/boot/dts/vexpress-pds28.dtsi
new file mode 100644
index 000000000000..cbed98a22ff5
--- /dev/null
+++ b/arch/arm/boot/dts/vexpress-pds28.dtsi
@@ -0,0 +1,463 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * ARM Ltd. Versatile Express
+ *
+ * Motherboard Express uATX
+ * V2M-P1
+ *
+ * HBI-0190D
+ *
+ * Original memory map ("Legacy memory map" in the board's
+ * Technical Reference Manual)
+ *
+ * WARNING! The hardware described in this file is independent from the
+ * RS1 variant (vexpress-v2m-rs1.dtsi), but there is a strong
+ * correspondence between the two configurations.
+ *
+ * TAKE CARE WHEN MAINTAINING THIS FILE TO PROPAGATE ANY RELEVANT
+ * CHANGES TO vexpress-v2m-rs1.dtsi!
+ */
+
+/ {
+	smb@4000000 {
+		motherboard {
+			model = "V2M-P1";
+			arm,hbi = <0x190>;
+			arm,vexpress,site = <0>;
+			compatible = "arm,vexpress,v2m-p1", "simple-bus";
+			#address-cells = <2>; /* SMB chipselect number and offset */
+			#size-cells = <1>;
+			#interrupt-cells = <1>;
+			ranges;
+
+			flash@0,00000000 {
+				compatible = "arm,vexpress-flash", "cfi-flash";
+				reg = <0 0x00000000 0x04000000>,
+				      <1 0x00000000 0x04000000>;
+				bank-width = <4>;
+			};
+
+			psram@2,00000000 {
+				compatible = "arm,vexpress-psram", "mtd-ram";
+				reg = <2 0x00000000 0x02000000>;
+				bank-width = <4>;
+			};
+
+			ethernet@3,02000000 {
+				compatible = "smsc,lan9118", "smsc,lan9115";
+				reg = <3 0x02000000 0x10000>;
+				interrupts = <15>;
+				phy-mode = "mii";
+				reg-io-width = <4>;
+				smsc,irq-active-high;
+				smsc,irq-push-pull;
+				vdd33a-supply = <&v2m_fixed_3v3>;
+				vddvario-supply = <&v2m_fixed_3v3>;
+			};
+
+			usb@3,03000000 {
+				compatible = "nxp,usb-isp1761";
+				reg = <3 0x03000000 0x20000>;
+				interrupts = <16>;
+				port1-otg;
+			};
+
+			iofpga@7,00000000 {
+				compatible = "simple-bus";
+				#address-cells = <1>;
+				#size-cells = <1>;
+				ranges = <0 7 0 0x20000>;
+
+				v2m_sysreg: sysreg@0 {
+					compatible = "arm,vexpress-sysreg";
+					reg = <0x00000 0x1000>;
+					#address-cells = <1>;
+					#size-cells = <1>;
+					ranges = <0 0 0x1000>;
+
+					v2m_led_gpios: gpio@8 {
+						compatible = "arm,vexpress-sysreg,sys_led";
+						reg = <0x008 4>;
+						gpio-controller;
+						#gpio-cells = <2>;
+					};
+
+					v2m_mmc_gpios: gpio@48 {
+						compatible = "arm,vexpress-sysreg,sys_mci";
+						reg = <0x048 4>;
+						gpio-controller;
+						#gpio-cells = <2>;
+					};
+
+					v2m_flash_gpios: gpio@4c {
+						compatible = "arm,vexpress-sysreg,sys_flash";
+						reg = <0x04c 4>;
+						gpio-controller;
+						#gpio-cells = <2>;
+					};
+				};
+
+				v2m_sysctl: sysctl@1000 {
+					compatible = "arm,sp810", "arm,primecell";
+					reg = <0x01000 0x1000>;
+					clocks = <&v2m_refclk32khz>, <&v2m_refclk1mhz>, <&smbclk>;
+					clock-names = "refclk", "timclk", "apb_pclk";
+					#clock-cells = <1>;
+					clock-output-names = "timerclken0", "timerclken1", "timerclken2", "timerclken3";
+					assigned-clocks = <&v2m_sysctl 0>, <&v2m_sysctl 1>, <&v2m_sysctl 3>, <&v2m_sysctl 3>;
+					assigned-clock-parents = <&v2m_refclk1mhz>, <&v2m_refclk1mhz>, <&v2m_refclk1mhz>, <&v2m_refclk1mhz>;
+				};
+
+				/* PCI-E I2C bus */
+				v2m_i2c_pcie: i2c@2000 {
+					compatible = "arm,versatile-i2c";
+					reg = <0x02000 0x1000>;
+
+					#address-cells = <1>;
+					#size-cells = <0>;
+
+					pcie-switch@60 {
+						compatible = "idt,89hpes32h8";
+						reg = <0x60>;
+					};
+				};
+
+				aaci@4000 {
+					compatible = "arm,pl041", "arm,primecell";
+					reg = <0x04000 0x1000>;
+					interrupts = <11>;
+					clocks = <&smbclk>;
+					clock-names = "apb_pclk";
+				};
+
+				mmci@1b000 {
+					compatible = "arm,pl180", "arm,primecell";
+					reg = <0x1b000 0x1000>;
+					interrupts = <9 10>;
+					cd-gpios = <&v2m_mmc_gpios 0 0>;
+					wp-gpios = <&v2m_mmc_gpios 1 0>;
+					max-frequency = <12000000>;
+					vmmc-supply = <&v2m_fixed_3v3>;
+					clocks = <&v2m_clk24mhz>, <&smbclk>;
+					clock-names = "mclk", "apb_pclk";
+				};
+
+				kmi@6000 {
+					compatible = "arm,pl050", "arm,primecell";
+					reg = <0x06000 0x1000>;
+					interrupts = <12>;
+					clocks = <&v2m_clk24mhz>, <&smbclk>;
+					clock-names = "KMIREFCLK", "apb_pclk";
+				};
+
+				kmi@7000 {
+					compatible = "arm,pl050", "arm,primecell";
+					reg = <0x07000 0x1000>;
+					interrupts = <13>;
+					clocks = <&v2m_clk24mhz>, <&smbclk>;
+					clock-names = "KMIREFCLK", "apb_pclk";
+				};
+
+				v2m_serial0: uart@d000 {
+					compatible = "arm,pl011", "arm,primecell";
+					reg = <0x0d000 0x1000>;
+					interrupts = <5>;
+					clocks = <&v2m_oscclk2>, <&smbclk>;
+					clock-names = "uartclk", "apb_pclk";
+				};
+
+				v2m_serial1: uart@a000 {
+					compatible = "arm,pl011", "arm,primecell";
+					reg = <0x0a000 0x1000>;
+					interrupts = <6>;
+					clocks = <&v2m_oscclk2>, <&smbclk>;
+					clock-names = "uartclk", "apb_pclk";
+				};
+
+				v2m_serial2: uart@b000 {
+					compatible = "arm,pl011", "arm,primecell";
+					reg = <0x0b000 0x1000>;
+					interrupts = <7>;
+					clocks = <&v2m_oscclk2>, <&smbclk>;
+					clock-names = "uartclk", "apb_pclk";
+				};
+
+				v2m_serial3: uart@c000 {
+					compatible = "arm,pl011", "arm,primecell";
+					reg = <0x0c000 0x1000>;
+					interrupts = <8>;
+					clocks = <&v2m_oscclk2>, <&smbclk>;
+					clock-names = "uartclk", "apb_pclk";
+				};
+
+				wdt@f000 {
+					compatible = "arm,sp805", "arm,primecell";
+					reg = <0x0f000 0x1000>;
+					interrupts = <0>;
+					clocks = <&v2m_refclk32khz>, <&smbclk>;
+					clock-names = "wdogclk", "apb_pclk";
+				};
+
+				v2m_timer01: timer@9000 {
+					compatible = "arm,sp804", "arm,primecell";
+					reg = <0x09000 0x1000>;
+					interrupts = <2>;
+					clocks = <&v2m_sysctl 0>, <&v2m_sysctl 1>, <&smbclk>;
+					clock-names = "timclken1", "timclken2", "apb_pclk";
+				};
+
+				v2m_timer23: timer@12000 {
+					compatible = "arm,sp804", "arm,primecell";
+					reg = <0x12000 0x1000>;
+					interrupts = <3>;
+					clocks = <&v2m_sysctl 2>, <&v2m_sysctl 3>, <&smbclk>;
+					clock-names = "timclken1", "timclken2", "apb_pclk";
+				};
+
+				/* DVI I2C bus */
+				v2m_i2c_dvi: i2c@16000 {
+					compatible = "arm,versatile-i2c";
+					reg = <0x16000 0x1000>;
+					#address-cells = <1>;
+					#size-cells = <0>;
+
+					dvi-transmitter@39 {
+						compatible = "sil,sii9022-tpi", "sil,sii9022";
+						reg = <0x39>;
+
+						ports {
+							#address-cells = <1>;
+							#size-cells = <0>;
+
+							/*
+							 * Both the core tile and the motherboard routes their output
+							 * pads to this transmitter. The motherboard system controller
+							 * can select one of them as input using a mux register in
+							 * "arm,vexpress-muxfpga". The Vexpress with the CA9 core tile is
+							 * the only platform with this specific set-up.
+							 */
+							port@0 {
+								reg = <0>;
+								dvi_bridge_in_ct: endpoint {
+									remote-endpoint = <&clcd_pads_ct>;
+								};
+							};
+							port@1 {
+								reg = <1>;
+								dvi_bridge_in_mb: endpoint {
+									remote-endpoint = <&clcd_pads_mb>;
+								};
+							};
+						};
+					};
+
+					dvi-transmitter@60 {
+						compatible = "sil,sii9022-cpi", "sil,sii9022";
+						reg = <0x60>;
+					};
+				};
+
+				rtc@17000 {
+					compatible = "arm,pl031", "arm,primecell";
+					reg = <0x17000 0x1000>;
+					interrupts = <4>;
+					clocks = <&smbclk>;
+					clock-names = "apb_pclk";
+				};
+
+				compact-flash@1a000 {
+					compatible = "arm,vexpress-cf", "ata-generic";
+					reg = <0x1a000 0x100
+					       0x1a100 0xf00>;
+					reg-shift = <2>;
+				};
+
+				pds28_mms@1e000 {
+					compatible = "arm,pds28-mms";
+					reg = <0x1e000 0x1000>;
+					interrupts = <30>;
+				};
+
+				pds28_i2c@19000 {
+					compatible = "arm,versatile-i2c";
+					reg = <0x19000 0x1000>;
+					#address-cells = <1>;
+					#size-cells = <0>;
+				};
+
+				clcd@1f000 {
+					compatible = "arm,pl111", "arm,primecell";
+					reg = <0x1f000 0x1000>;
+					interrupt-names = "combined";
+					interrupts = <14>;
+					clocks = <&v2m_oscclk1>, <&smbclk>;
+					clock-names = "clcdclk", "apb_pclk";
+					/* 800x600 16bpp @36MHz works fine */
+					max-memory-bandwidth = <54000000>;
+					memory-region = <&vram>;
+
+					port {
+						clcd_pads_mb: endpoint {
+							remote-endpoint = <&dvi_bridge_in_mb>;
+							arm,pl11x,tft-r0g0b0-pads = <0 8 16>;
+						};
+					};
+				};
+			};
+
+			v2m_fixed_3v3: fixed-regulator-0 {
+				compatible = "regulator-fixed";
+				regulator-name = "3V3";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+			};
+
+			v2m_clk24mhz: clk24mhz {
+				compatible = "fixed-clock";
+				#clock-cells = <0>;
+				clock-frequency = <24000000>;
+				clock-output-names = "v2m:clk24mhz";
+			};
+
+			v2m_refclk1mhz: refclk1mhz {
+				compatible = "fixed-clock";
+				#clock-cells = <0>;
+				clock-frequency = <1000000>;
+				clock-output-names = "v2m:refclk1mhz";
+			};
+
+			v2m_refclk32khz: refclk32khz {
+				compatible = "fixed-clock";
+				#clock-cells = <0>;
+				clock-frequency = <32768>;
+				clock-output-names = "v2m:refclk32khz";
+			};
+
+			leds {
+				compatible = "gpio-leds";
+
+				user1 {
+					label = "v2m:green:user1";
+					gpios = <&v2m_led_gpios 0 0>;
+					linux,default-trigger = "heartbeat";
+				};
+
+				user2 {
+					label = "v2m:green:user2";
+					gpios = <&v2m_led_gpios 1 0>;
+					linux,default-trigger = "mmc0";
+				};
+
+				user3 {
+					label = "v2m:green:user3";
+					gpios = <&v2m_led_gpios 2 0>;
+					linux,default-trigger = "cpu0";
+				};
+
+				user4 {
+					label = "v2m:green:user4";
+					gpios = <&v2m_led_gpios 3 0>;
+					linux,default-trigger = "cpu1";
+				};
+
+				user5 {
+					label = "v2m:green:user5";
+					gpios = <&v2m_led_gpios 4 0>;
+					linux,default-trigger = "cpu2";
+				};
+
+				user6 {
+					label = "v2m:green:user6";
+					gpios = <&v2m_led_gpios 5 0>;
+					linux,default-trigger = "cpu3";
+				};
+
+				user7 {
+					label = "v2m:green:user7";
+					gpios = <&v2m_led_gpios 6 0>;
+					linux,default-trigger = "cpu4";
+				};
+
+				user8 {
+					label = "v2m:green:user8";
+					gpios = <&v2m_led_gpios 7 0>;
+					linux,default-trigger = "cpu5";
+				};
+			};
+
+			mcc {
+				compatible = "arm,vexpress,config-bus";
+				arm,vexpress,config-bridge = <&v2m_sysreg>;
+
+				oscclk0 {
+					/* MCC static memory clock */
+					compatible = "arm,vexpress-osc";
+					arm,vexpress-sysreg,func = <1 0>;
+					freq-range = <25000000 60000000>;
+					#clock-cells = <0>;
+					clock-output-names = "v2m:oscclk0";
+				};
+
+				v2m_oscclk1: oscclk1 {
+					/* CLCD clock */
+					compatible = "arm,vexpress-osc";
+					arm,vexpress-sysreg,func = <1 1>;
+					freq-range = <23750000 65000000>;
+					#clock-cells = <0>;
+					clock-output-names = "v2m:oscclk1";
+				};
+
+				v2m_oscclk2: oscclk2 {
+					/* IO FPGA peripheral clock */
+					compatible = "arm,vexpress-osc";
+					arm,vexpress-sysreg,func = <1 2>;
+					freq-range = <24000000 24000000>;
+					#clock-cells = <0>;
+					clock-output-names = "v2m:oscclk2";
+				};
+
+				volt-vio {
+					/* Logic level voltage */
+					compatible = "arm,vexpress-volt";
+					arm,vexpress-sysreg,func = <2 0>;
+					regulator-name = "VIO";
+					regulator-always-on;
+					label = "VIO";
+				};
+
+				temp-mcc {
+					/* MCC internal operating temperature */
+					compatible = "arm,vexpress-temp";
+					arm,vexpress-sysreg,func = <4 0>;
+					label = "MCC";
+				};
+
+				reset {
+					compatible = "arm,vexpress-reset";
+					arm,vexpress-sysreg,func = <5 0>;
+				};
+
+				muxfpga {
+					compatible = "arm,vexpress-muxfpga";
+					arm,vexpress-sysreg,func = <7 0>;
+				};
+
+				shutdown {
+					compatible = "arm,vexpress-shutdown";
+					arm,vexpress-sysreg,func = <8 0>;
+				};
+
+				reboot {
+					compatible = "arm,vexpress-reboot";
+					arm,vexpress-sysreg,func = <9 0>;
+				};
+
+				dvimode {
+					compatible = "arm,vexpress-dvimode";
+					arm,vexpress-sysreg,func = <11 0>;
+				};
+			};
+		};
+	};
+};
diff --git a/drivers/char/Kconfig b/drivers/char/Kconfig
index b1bd336761b1..5bd7d8e3b5b6 100644
--- a/drivers/char/Kconfig
+++ b/drivers/char/Kconfig
@@ -495,3 +495,10 @@ config RANDOM_TRUST_BOOTLOADER
 	booloader is trustworthy so it will be added to the kernel's entropy
 	pool. Otherwise, say N here so it will be regarded as device input that
 	only mixes the entropy pool.
+
+config PDS28_MMS
+	tristate "Memory maped sensor driver"
+	depends on ARCH_VEXPRESS
+	default y
+	help
+	This is a driver for modified vexpress a9 board school project
diff --git a/drivers/char/Makefile b/drivers/char/Makefile
index ffce287ef415..13485aeb5061 100644
--- a/drivers/char/Makefile
+++ b/drivers/char/Makefile
@@ -47,3 +47,4 @@ obj-$(CONFIG_PS3_FLASH)		+= ps3flash.o
 obj-$(CONFIG_XILLYBUS)		+= xillybus/
 obj-$(CONFIG_POWERNV_OP_PANEL)	+= powernv-op-panel.o
 obj-$(CONFIG_ADI)		+= adi.o
+obj-$(CONFIG_PDS28_MMS)		+= pds28-mms.o
diff --git a/drivers/char/pds28-mms.c b/drivers/char/pds28-mms.c
new file mode 100644
index 000000000000..6a09b023aaec
--- /dev/null
+++ b/drivers/char/pds28-mms.c
@@ -0,0 +1,469 @@
+/* pds28-mms.c */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/interrupt.h>
+#include <linux/uaccess.h>
+#include <linux/fs.h>
+#include <linux/cdev.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/string.h>
+
+#define DEVICE_FILE_NAME	"pds28mms"
+#define DRIVER_NAME		"pds28mmsdrv"
+
+#define MMS_CTRL_OFFSET	(0x00)
+#define MMS_STATUS_OFFSET	(0x04)
+#define MMS_DATA_OFFSET	(0x08)
+
+#define CTRL_EN_MASK		(0x10000000)
+#define CTRL_IEN_MASK		(0x20000000)
+#define CTRL_RES_MASK		(0x40000000)
+#define CTRL_FREQ_MASK		(0x80000000)
+
+#define STATUS_IFG_MASK	(0x20000000)
+#define DATA_MASK		(0x0000FFFF)
+
+/**
+ * struct pds28_mms - pds28 mms device private data structure
+ * @base_addr:	base address of the device
+ * @irq:	interrupt for the device
+ * @dev:	struct device pointer
+ * @cdev:	struct cdev
+ * @devt:	dev_t member
+ * @alarm:	set if alarm is active
+ */
+struct pds28_mms {
+	void __iomem *base_addr;
+	int irq;
+	struct device *dev;
+	struct device *parent;
+	struct cdev cdev;
+	dev_t devt;
+};
+
+/* global so it can be destroyed when module is removed */
+static struct class* pds28_mms_class;
+
+/* convert 11-bit pds28_DEMO register value to 1/10th of a Celsius */
+static inline int pds28_mms_reg_to_mC(u16 val)
+{
+	return val * 10 / 16;
+}
+
+/* convert 1/10th of a Celsius to 11-bit ETF_DEMO register value */
+static inline u16 pds28_mms_mC_to_reg(int val)
+{
+	return (val * 16) / 10;
+}
+
+static int pds28_mmsdev_open(struct inode *inode, struct file *filp)
+{
+	struct pds28_mms *mmsdev;
+
+	/* store mmsdev pointer for read */
+	mmsdev = container_of(inode->i_cdev, struct pds28_mms, cdev);
+	filp->private_data = mmsdev;
+
+	return 0;
+}
+
+static int pds28_mmsdev_release(struct inode *inode, struct file *filp)
+{
+	return 0;
+}
+
+static ssize_t pds28_mmsdev_read(struct file *filp, char __user *buf, size_t count, loff_t *f_pos)
+{
+	struct pds28_mms *mmsdev;
+	/* buffer */
+	static char buffer[10];
+	/* Number of bytes written to the buffer */
+	ssize_t bytes_read = 0;
+	/* data storage */
+	int data_reg;
+
+	if (*f_pos) {
+		*f_pos = 0;
+		return 0;
+	}
+
+	mmsdev = filp->private_data;
+
+	/* read data from DATA register */
+	data_reg = ioread32(mmsdev->base_addr+MMS_DATA_OFFSET);
+
+	/* pack it into buffer */
+	sprintf(buffer, "%d\n", data_reg);
+	bytes_read = strlen(buffer);
+
+	/* copy_to_user */
+	if (copy_to_user(buf, buffer, bytes_read)) {
+		return -EFAULT;
+	}
+	*f_pos += bytes_read;
+
+	/* return number of bytes read */
+	return bytes_read;
+}
+
+static ssize_t pds28_mmsdev_write(struct file *filp, const char __user *buf, size_t count, loff_t *f_pos)
+{
+	pr_alert("not implemented\n");
+	return -EINVAL;
+}
+
+static struct file_operations pds28_mmsdev_fops = {
+	.owner = THIS_MODULE,
+	.open = pds28_mmsdev_open,
+	.release = pds28_mmsdev_release,
+	.read = pds28_mmsdev_read,
+	.write = pds28_mmsdev_write,
+};
+
+/*static ssize_t ien_show(struct device *child, struct device_attribute *attr, char *buf)
+{
+	struct pds28_mms *mmsdev = dev_get_drvdata(child);
+
+	u32 alarm = ioread32(mmsdev->base_addr + MMS_STATUS_OFFSET);
+	alarm &= STATUS_ALARM_MASK;
+
+	return sprintf(buf, "%d\n", !!alarm);
+}
+static DEVICE_ATTR_RO(alarm);*/
+
+static ssize_t ctrl_ien_show(struct device *child, struct device_attribute *attr, char *buf)
+{
+	struct pds28_mms *mmsdev = dev_get_drvdata(child);
+
+	u32 enable_alarm = ioread32(mmsdev->base_addr + MMS_CTRL_OFFSET);
+	enable_alarm &= CTRL_IEN_MASK;
+
+	return sprintf(buf, "%d\n", !!enable_alarm);
+}
+
+static ssize_t ctrl_ien_store(struct device *child, struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct pds28_mms *mmsdev = dev_get_drvdata(child);
+	u32 ctrl = ioread32(mmsdev->base_addr + MMS_CTRL_OFFSET);
+	int enable_alarm;
+
+	sscanf(buf, "%d", &enable_alarm);
+	if (!enable_alarm) {
+		ctrl &= ~CTRL_IEN_MASK;
+	} else {
+		ctrl |= CTRL_IEN_MASK;
+	}
+	iowrite32(ctrl, mmsdev->base_addr + MMS_CTRL_OFFSET);
+	return count;
+}
+static DEVICE_ATTR_RW(ctrl_ien);
+
+static ssize_t ctrl_en_show(struct device *child, struct device_attribute *attr, char *buf)
+{
+	struct pds28_mms *mmsdev = dev_get_drvdata(child);
+	u32 enable = ioread32(mmsdev->base_addr + MMS_CTRL_OFFSET);
+
+	enable &= CTRL_EN_MASK;
+	return sprintf(buf, "%d\n", !!enable);
+}
+
+static ssize_t ctrl_en_store(struct device *child, struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct pds28_mms *mmsdev = dev_get_drvdata(child);
+	u32 ctrl = ioread32(mmsdev->base_addr + MMS_CTRL_OFFSET);
+	int enable;
+
+	sscanf(buf, "%d", &enable);
+	if (!enable) {
+		ctrl &= ~CTRL_EN_MASK;
+	} else {
+		ctrl |= CTRL_EN_MASK;
+	}
+	iowrite32(ctrl, mmsdev->base_addr + MMS_CTRL_OFFSET);
+	return count;
+}
+static DEVICE_ATTR_RW(ctrl_en);
+
+static ssize_t ctrl_res_show(struct device *child, struct device_attribute *attr, char *buf)
+{
+	struct pds28_mms *mmsdev = dev_get_drvdata(child);
+	u32 ctrl = ioread32(mmsdev->base_addr + MMS_CTRL_OFFSET);
+
+	if (ctrl & CTRL_RES_MASK) {
+		return sprintf(buf, "coarse\n");
+	} else {
+		return sprintf(buf, "fine\n");
+	}
+}
+
+static ssize_t ctrl_res_store(struct device *child, struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct pds28_mms *mmsdev = dev_get_drvdata(child);
+	int ret;
+        char resolution[16];
+	u32 ctrl = ioread32(mmsdev->base_addr + MMS_CTRL_OFFSET);
+	
+	ret = sscanf(buf, "%15s", resolution);
+	if (ret != 1)
+                return -EINVAL;
+	if (!strncasecmp(resolution, "fine", 5)) 
+		ctrl &= ~CTRL_RES_MASK;
+	else
+		if (!strncasecmp(resolution, "coarse", 7))
+			ctrl |= CTRL_RES_MASK;
+	iowrite32(ctrl, mmsdev->base_addr + MMS_CTRL_OFFSET);
+	return ret ? ret : count;
+}
+static DEVICE_ATTR_RW(ctrl_res);
+
+static ssize_t available_res_show(struct device *child, struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "fine coarse\n");
+}
+static DEVICE_ATTR_RO(available_res);
+
+static ssize_t ctrl_freq_show(struct device *child, struct device_attribute *attr, char *buf)
+{
+	struct pds28_mms *mmsdev = dev_get_drvdata(child);
+	u32 ctrl = ioread32(mmsdev->base_addr + MMS_CTRL_OFFSET);
+
+	if (ctrl & CTRL_FREQ_MASK) {
+		return sprintf(buf, "fast\n");
+	} else {
+		return sprintf(buf, "normal\n");
+	}
+}
+
+static ssize_t ctrl_freq_store(struct device *child, struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct pds28_mms *mmsdev = dev_get_drvdata(child);
+	int ret;
+        char freq[16];
+	u32 ctrl = ioread32(mmsdev->base_addr + MMS_CTRL_OFFSET);
+	
+	ret = sscanf(buf, "%15s", freq);
+	if (ret != 1)
+                return -EINVAL;
+	if (!strncasecmp(freq, "normal", 7)) 
+		ctrl &= ~CTRL_FREQ_MASK;
+	else
+		if (!strncasecmp(freq, "fast", 5))
+			ctrl |= CTRL_FREQ_MASK;
+	iowrite32(ctrl, mmsdev->base_addr + MMS_CTRL_OFFSET);
+	return ret ? ret : count;
+}
+static DEVICE_ATTR_RW(ctrl_freq);
+
+static ssize_t available_freq_show(struct device *child, struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "normal fast\n");
+}
+static DEVICE_ATTR_RO(available_freq);
+
+static u32 pds28_mms_data_to_mV(u32 data, u32 reso)
+{
+	u32 result = 0;	
+	data = data & DATA_MASK;
+	switch (reso) {
+	case 0:
+		data = data >> 4;
+		result += (data >> 7) * 1000;
+		result += (data & 0x00000001) ? 7 : 0;
+		result += (data & 0x00000002) ? 15 : 0;
+		result += (data & 0x00000004) ? 31 : 0 ;
+		result += (data & 0x00000008) ? 62 : 0;
+		result += (data & 0x00000010) ? 125 : 0;
+		result += (data & 0x00000020) ? 250 : 0;
+		result += (data & 0x00000040) ? 500 : 0;
+		return result;
+	case 1:
+		data = data >> 8;
+		result += (data >> 3) * 1000;
+		result += (data & 0x00000001) ? 125 : 0;
+		result += (data & 0x00000002) ? 250 : 0;
+		result += (data & 0x00000004) ? 500 : 0;
+		return result; 
+	default:
+		return -EINVAL;
+	} 
+}
+static ssize_t data_show(struct device *child, struct device_attribute *attr, char *buf)
+{
+	struct pds28_mms *mmsdev = dev_get_drvdata(child);
+
+	u32 data = ioread32(mmsdev->base_addr + MMS_DATA_OFFSET);
+	u32 reso = ioread32(mmsdev->base_addr + MMS_CTRL_OFFSET) & CTRL_RES_MASK;
+	data &= DATA_MASK;
+
+	return sprintf(buf, "%d\n", pds28_mms_data_to_mV(data, reso ? 1 : 0));
+}
+static DEVICE_ATTR_RO(data);
+
+static struct attribute *pds28_mms_attrs[] = {
+	//&dev_attr_alarm.attr,
+	&dev_attr_ctrl_ien.attr,
+	&dev_attr_ctrl_en.attr,
+	&dev_attr_ctrl_res.attr,
+	&dev_attr_ctrl_freq.attr,
+	&dev_attr_available_res.attr,
+	&dev_attr_available_freq.attr,
+	&dev_attr_data.attr,
+	NULL,
+};
+
+ATTRIBUTE_GROUPS(pds28_mms);
+
+static irqreturn_t pds28_mms_isr(int irq, void *data)
+{
+	struct pds28_mms *mmsdev = data;
+
+	pr_info("ALARM received\n");
+
+	iowrite32(0, mmsdev->base_addr + MMS_STATUS_OFFSET);
+
+	return IRQ_HANDLED;
+}
+
+static const struct of_device_id pds28_mms_of_match[] = {
+	{ .compatible = "arm,pds28-mms", },
+	{ /* end of table */ }
+};
+MODULE_DEVICE_TABLE(of, pds28_mms_of_match);
+
+static int pds28_mmsdev_setup(struct device *parent)
+{
+	int ret;
+	dev_t devt;
+	struct pds28_mms *mmsdev;
+
+	mmsdev = dev_get_drvdata(parent);
+
+	ret = alloc_chrdev_region(&devt, 0, 1, DEVICE_FILE_NAME);
+	if (ret < 0) {
+		dev_err(parent, "failed to alloc chrdev region\n");
+		goto fail_alloc_chrdev_region;
+	}
+	mmsdev->devt = devt;
+
+	cdev_init(&mmsdev->cdev, &pds28_mmsdev_fops);
+	ret = cdev_add(&mmsdev->cdev, devt, 1);
+	if (ret < 0) {
+		dev_err(parent, "failed to add cdev\n");
+		goto fail_add_cdev;
+	}
+
+	pds28_mms_class = class_create(THIS_MODULE, "pds28");
+	if (!pds28_mms_class) {
+		ret = -EEXIST;
+		dev_err(parent, "failed to create class\n");
+		goto fail_create_class;
+	}
+
+	mmsdev->dev = device_create_with_groups(pds28_mms_class, parent, devt, mmsdev, pds28_mms_groups, "%s%d", DEVICE_FILE_NAME, MINOR(devt));
+	if (IS_ERR(mmsdev->dev)) {
+		mmsdev->dev = NULL;
+		ret = -EINVAL;
+		dev_err(parent, "failed to create device\n");
+		goto fail_create_device;
+	}
+
+	return 0;
+
+fail_create_device:
+	class_destroy(pds28_mms_class);
+fail_create_class:
+	cdev_del(&mmsdev->cdev);
+fail_add_cdev:
+	unregister_chrdev_region(devt, 1);
+fail_alloc_chrdev_region:
+	return ret;
+}
+
+static int pds28_mms_probe(struct platform_device *pdev)
+{
+	int ret;
+	struct pds28_mms *mmsdev;
+	struct resource *res;
+	const struct of_device_id *match;
+
+	mmsdev = devm_kzalloc(&pdev->dev, sizeof(*mmsdev), GFP_KERNEL);
+	if (!mmsdev)
+		return -ENOMEM;
+
+	mmsdev->parent = &pdev->dev;
+
+	match = of_match_node(pds28_mms_of_match, pdev->dev.of_node);
+	if (!match) {
+		dev_err(&pdev->dev, "of_match_node() failed\n");
+		return -EINVAL;
+	}
+
+	platform_set_drvdata(pdev, mmsdev);
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	mmsdev->base_addr = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(mmsdev->base_addr))
+		return PTR_ERR(mmsdev->base_addr);
+
+	mmsdev->irq = platform_get_irq(pdev, 0);
+	if (mmsdev->irq < 0) {
+		dev_err(&pdev->dev, "invalid IRQ\n");
+		return mmsdev->irq;
+	}
+	ret = devm_request_irq(&pdev->dev, mmsdev->irq, pds28_mms_isr, 0, dev_name(&pdev->dev), mmsdev);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "unable to request IRQ\n");
+		return ret;
+	}
+
+	/* initialize device */
+	ret = pds28_mmsdev_setup(&pdev->dev);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "failed to create device\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+static int pds28_mms_remove(struct platform_device *pdev)
+{
+	struct pds28_mms *mmsdev;
+
+	mmsdev = dev_get_drvdata(&pdev->dev);
+
+	device_destroy(pds28_mms_class, mmsdev->devt);
+	class_destroy(pds28_mms_class);
+	cdev_del(&mmsdev->cdev);
+	unregister_chrdev_region(mmsdev->devt, 1);
+
+	return 0;
+}
+
+static struct platform_driver pds28_mms_driver = {
+	.driver = {
+		.name = DRIVER_NAME,
+		.of_match_table = pds28_mms_of_match,
+	},
+	.probe = pds28_mms_probe,
+	.remove = pds28_mms_remove,
+};
+
+static int __init pds28_mms_init(void)
+{
+	pr_alert("Hello, world!\n");
+	return platform_driver_register(&pds28_mms_driver);
+}
+
+static void __exit pds28_mms_exit(void)
+{
+	pr_alert("Goodbye, world!\n");
+	return platform_driver_unregister(&pds28_mms_driver);
+}
+
+module_init(pds28_mms_init);
+module_exit(pds28_mms_exit);
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("ETF Demo Driver and Device");
+MODULE_AUTHOR("Strahinja Jankovic (ETF Belgrade)");
